import React, { useEffect, useRef, useState } from "react";
import Head from "next/head";
import axios from "axios";
import useInput from "../components/hooks/useInput";

const mappingOperaToSunDetail = () => {
  const {
    value: sunAttribute,
    resetValue: resetSunAttribute,
    setValue: setSunAttribute,
    bind: bindSunAttribute,
  } = useInput("");

  const {
    value: valueOfType,
    resetValue: resetValueOfType,
    setValue: setValueOfType,
    bind: bindValueOfType,
  } = useInput("");

  const [columns, setColumns] = useState([]);

  const types = ["DateTime", "Decimal", "Double", "Int", "String", "Short"];

  const [type, setType] = useState("");
  const [mapWithOperaName, setMapWithOperaName] = useState("");
  const [mapWithOperaNames, setMapWithOperaNames] = useState([]);
  const [conditionForType, setConditionForType] = useState("");

  useEffect(() => {
    axios
      .get(
        "http://34.65.51.37/Mapping/OperaToSun/ReportToDetail/GetOperaReportSunDetail"
      )
      .then((res) => {
        setColumns(res.data);
        console.log(res.data);
      });

    axios.get("http://34.65.51.37/Opera/Report/GetColumns").then((res) => {
      setMapWithOperaNames(res.data.map((name) => name.name));
    });
  }, []);

  const handleSubmit = (e) => {
    e.preventDefault();

    if (condition === "isConst") {
      setColumns([
        ...columns,
        {
          sunAttribute: sunAttribute,
          valueType: type,
          [conditionForType]: valueOfType,
          isConst: true,
          autoGenerated: false,
        },
      ]);
    } else if (condition === "isAuto") {
      setColumns([
        ...columns,
        {
          sunAttribute: sunAttribute,
          valueType: type,
          isConst: false,
          autoGenerated: true,
        },
      ]);
    } else if (condition === "mapWithOpera") {
      setColumns([
        ...columns,
        {
          sunAttribute: sunAttribute,
          valueType: type,
          mapWithOPERA: mapWithOperaName,
          isConst: false,
          autoGenerated: false,
        },
      ]);
    }
    setSunAttribute("");
    setType("");
    setValueOfType("");
  };

  useEffect(() => {
    if (type === "DateTime") {
      setConditionForType("dateTimeValue");
    } else if (type === "Decimal") {
      setConditionForType("decimalValue");
      if (valueOfType) setValueOfType(parseInt(valueOfType));
    } else if (type === "Double") {
      setConditionForType("doubleValue");
      if (valueOfType) setValueOfType(parseInt(valueOfType));
    } else if (type === "Int") {
      setConditionForType("intValue");
      if (valueOfType) setValueOfType(parseInt(valueOfType));
    } else if (type === "Short") {
      setConditionForType("shortValue");
      if (valueOfType) setValueOfType(parseInt(valueOfType));
    } else if (type === "String") {
      setConditionForType("stringValue");
    }
  }, [type, valueOfType]);

  const isFirstRender = useRef(true);

  useEffect(() => {
    if (!isFirstRender.current) {
      // do something after state has updated
      if (columns.length > 0) {
        const columnsConfig = {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          data: [...columns],
        };
        axios(
          "http://34.65.51.37/Mapping/OperaToSun/ReportToDetail/UpdateOperaReportSunDetail",
          columnsConfig
        )
          .then((res) => console.log(res))
          .catch((error) => {
            console.error("There was an error!", error);
          });
      } else {
        alert("Error!");
      }
    }
  }, [columns]);

  useEffect(() => {
    isFirstRender.current = false; // toggle flag after first render/mounting
  }, []);

  const [isEdited, setIsEdited] = useState(false);

  const [idOfeditedColumn, setIdOfEditedColumn] = useState("");

  const handleEdit = (sunAttribute, valueType, i) => {
    setIsEdited(true);
    setSunAttribute(sunAttribute);
    setIdOfEditedColumn(sunAttribute);
  };

  const handleUpdate = () => {
    setColumns(
      columns.map((column) => {
        if (column.sunAttribute !== idOfeditedColumn) return column;
        else {
          if (condition === "isConst") {
            return {
              ...columns,
              sunAttribute: sunAttribute,
              valueType: type,
              [conditionForType]: valueOfType,
              isConst: true,
              autoGenerated: false,
            };
          } else if (condition === "isAuto") {
            return {
              ...columns,
              sunAttribute: sunAttribute,
              valueType: type,
              isConst: false,
              autoGenerated: true,
            };
          } else if (condition === "mapWithOpera") {
            return {
              ...columns,
              sunAttribute: sunAttribute,
              valueType: type,
              mapWithOPERA: mapWithOperaName,
              isConst: false,
              autoGenerated: false,
            };
          }
        }
      })
    );
    setIsEdited(false);
    setSunAttribute("");
    setType("");
    setValueOfType("");
  };

  const handleDelete = (sunAttribute) => {
    if (columns.length > 0) {
      const newColumns = columns.filter(
        (item) => item.sunAttribute !== sunAttribute
      );
      setColumns([...newColumns]);
    }
  };

  const [condition, setCondition] = useState("");

  const handleCondition = (e) => {
    setCondition(e.target.value);
  };

  const handleTypeChange = (e) => {
    setType(e.target.value);
  };

  return (
    <div>
      <Head>
        <title>Mapping Opera To Sun Detail</title>
      </Head>

      <main>
        <div>
          <h5>Columns</h5>
          {columns.map(
            (
              {
                sunAttribute,
                valueType,
                id,
                autoGenerated,
                isConst,
                mapWithOPERA,
              },
              i
            ) => (
              <div key={i}>
                <span>
                  Sun Attribute: {sunAttribute}
                  {"  "}
                </span>
                <span>Value Type: {valueType}</span>
                {"  "}
                <span>Auto Generated: {autoGenerated ? "true" : "false"}</span>
                {"  "}
                <span>Is Const: {isConst ? "true" : "false"}</span>
                {"  "}
                {mapWithOPERA && <span>Map With OPERA: {mapWithOPERA}</span>}

                <button onClick={() => handleEdit(sunAttribute, valueType, i)}>
                  edit
                </button>
                <button onClick={() => handleDelete(sunAttribute)}>
                  delete
                </button>
              </div>
            )
          )}
        </div>
        <div>
          <h5>Add column</h5>
          <div>
            <form>
              <label>Sun Attribute</label>
              <input type="text" {...bindSunAttribute} required />
              <label>Choose a Type</label>
              <select
                name="columns"
                id="columns"
                onChange={(e) => handleTypeChange(e)}
              >
                {types.map((type, i) => (
                  <option key={i} value={type}>
                    {type}
                  </option>
                ))}
              </select>
              <div>
                <span>Choose</span>
                <input
                  type="radio"
                  id="isConst"
                  name="condition"
                  onChange={(e) => handleCondition(e)}
                  value="isConst"
                />
                <label htmlFor="isConst">isConst</label>
                <input
                  type="radio"
                  id="isAuto"
                  name="condition"
                  onChange={(e) => handleCondition(e)}
                  value="isAuto"
                />
                <label htmlFor="isAuto">isAuto</label>
                <input
                  type="radio"
                  id="mapWithOpera"
                  name="condition"
                  onChange={(e) => handleCondition(e)}
                  value="mapWithOpera"
                />
                <label htmlFor="mapWithOpera">mapWithOpera</label>
              </div>
              <div>
                {condition === "isConst" && (
                  <>
                    <label>Value</label>{" "}
                    <input type="text" {...bindValueOfType} required />
                  </>
                )}
                {condition === "isAuto" && null}
                {condition === "mapWithOpera" && (
                  <select
                    name="mapWithOperaName"
                    id="mapWithOperaName"
                    onChange={(e) => setMapWithOperaName(e.target.value)}
                  >
                    {mapWithOperaNames.map((mapWithOperaName, i) => (
                      <option key={i} value={mapWithOperaName}>
                        {mapWithOperaName}
                      </option>
                    ))}
                  </select>
                )}
              </div>
              {isEdited ? (
                <button type="button" onClick={handleUpdate}>
                  Update Column
                </button>
              ) : (
                <button type="button" onClick={handleSubmit}>
                  Submit
                </button>
              )}
            </form>
          </div>
        </div>
        <button onClick={() => console.log(condition)}>es</button>
      </main>
    </div>
  );
};
export default mappingOperaToSunDetail;
